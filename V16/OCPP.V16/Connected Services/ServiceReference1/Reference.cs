//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn://Ocpp/Cs/2015/10/", ConfigurationName="ServiceReference1.CentralSystemService")]
    public interface CentralSystemService
    {
        
        // CODEGEN: Generating message contract since the wrapper name (authorizeRequest) of message AuthorizeRequest does not match the default value (Authorize)
        [System.ServiceModel.OperationContractAttribute(Action="/Authorize", ReplyAction="/AuthorizeResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ServiceReference1.AuthorizeResponse Authorize(ServiceReference1.AuthorizeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="/Authorize", ReplyAction="/AuthorizeResponse")]
        System.Threading.Tasks.Task<ServiceReference1.AuthorizeResponse> AuthorizeAsync(ServiceReference1.AuthorizeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="/BootNotification", ReplyAction="/BootNotificationResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ServiceReference1.BootNotificationResponse BootNotification(ServiceReference1.BootNotificationRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="/BootNotification", ReplyAction="/BootNotificationResponse")]
        System.Threading.Tasks.Task<ServiceReference1.BootNotificationResponse> BootNotificationAsync(ServiceReference1.BootNotificationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="/DataTransfer", ReplyAction="/DataTransferResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ServiceReference1.DataTransferResponse DataTransfer(ServiceReference1.DataTransferRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="/DataTransfer", ReplyAction="/DataTransferResponse")]
        System.Threading.Tasks.Task<ServiceReference1.DataTransferResponse> DataTransferAsync(ServiceReference1.DataTransferRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (diagnosticsStatusNotificationRequest) of message DiagnosticsStatusNotificationRequest does not match the default value (DiagnosticsStatusNotification)
        [System.ServiceModel.OperationContractAttribute(Action="/DiagnosticsStatusNotification", ReplyAction="/DiagnosticsStatusNotificationResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ServiceReference1.DiagnosticsStatusNotificationResponse DiagnosticsStatusNotification(ServiceReference1.DiagnosticsStatusNotificationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="/DiagnosticsStatusNotification", ReplyAction="/DiagnosticsStatusNotificationResponse")]
        System.Threading.Tasks.Task<ServiceReference1.DiagnosticsStatusNotificationResponse> DiagnosticsStatusNotificationAsync(ServiceReference1.DiagnosticsStatusNotificationRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (firmwareStatusNotificationRequest) of message FirmwareStatusNotificationRequest does not match the default value (FirmwareStatusNotification)
        [System.ServiceModel.OperationContractAttribute(Action="/FirmwareStatusNotification", ReplyAction="/FirmwareStatusNotificationResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ServiceReference1.FirmwareStatusNotificationResponse FirmwareStatusNotification(ServiceReference1.FirmwareStatusNotificationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="/FirmwareStatusNotification", ReplyAction="/FirmwareStatusNotificationResponse")]
        System.Threading.Tasks.Task<ServiceReference1.FirmwareStatusNotificationResponse> FirmwareStatusNotificationAsync(ServiceReference1.FirmwareStatusNotificationRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (heartbeatRequest) of message HeartbeatRequest does not match the default value (Heartbeat)
        [System.ServiceModel.OperationContractAttribute(Action="/Heartbeat", ReplyAction="/HeartbeatResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ServiceReference1.HeartbeatResponse Heartbeat(ServiceReference1.HeartbeatRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="/Heartbeat", ReplyAction="/HeartbeatResponse")]
        System.Threading.Tasks.Task<ServiceReference1.HeartbeatResponse> HeartbeatAsync(ServiceReference1.HeartbeatRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (meterValuesRequest) of message MeterValuesRequest does not match the default value (MeterValues)
        [System.ServiceModel.OperationContractAttribute(Action="/MeterValues", ReplyAction="/MeterValuesResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ServiceReference1.MeterValuesResponse MeterValues(ServiceReference1.MeterValuesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="/MeterValues", ReplyAction="/MeterValuesResponse")]
        System.Threading.Tasks.Task<ServiceReference1.MeterValuesResponse> MeterValuesAsync(ServiceReference1.MeterValuesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="/StartTransaction", ReplyAction="/StartTransactionResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ServiceReference1.StartTransactionResponse StartTransaction(ServiceReference1.StartTransactionRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="/StartTransaction", ReplyAction="/StartTransactionResponse")]
        System.Threading.Tasks.Task<ServiceReference1.StartTransactionResponse> StartTransactionAsync(ServiceReference1.StartTransactionRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (statusNotificationRequest) of message StatusNotificationRequest does not match the default value (StatusNotification)
        [System.ServiceModel.OperationContractAttribute(Action="/StatusNotification", ReplyAction="/StatusNotificationResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ServiceReference1.StatusNotificationResponse StatusNotification(ServiceReference1.StatusNotificationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="/StatusNotification", ReplyAction="/StatusNotificationResponse")]
        System.Threading.Tasks.Task<ServiceReference1.StatusNotificationResponse> StatusNotificationAsync(ServiceReference1.StatusNotificationRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (stopTransactionRequest) of message StopTransactionRequest does not match the default value (StopTransaction)
        [System.ServiceModel.OperationContractAttribute(Action="/StopTransaction", ReplyAction="/StopTransactionResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ServiceReference1.StopTransactionResponse StopTransaction(ServiceReference1.StopTransactionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="/StopTransaction", ReplyAction="/StopTransactionResponse")]
        System.Threading.Tasks.Task<ServiceReference1.StopTransactionResponse> StopTransactionAsync(ServiceReference1.StopTransactionRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public partial class IdTagInfo
    {
        
        private AuthorizationStatus statusField;
        
        private System.DateTime expiryDateField;
        
        private bool expiryDateFieldSpecified;
        
        private string parentIdTagField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AuthorizationStatus status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.DateTime expiryDate
        {
            get
            {
                return this.expiryDateField;
            }
            set
            {
                this.expiryDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expiryDateSpecified
        {
            get
            {
                return this.expiryDateFieldSpecified;
            }
            set
            {
                this.expiryDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string parentIdTag
        {
            get
            {
                return this.parentIdTagField;
            }
            set
            {
                this.parentIdTagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum AuthorizationStatus
    {
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Blocked,
        
        /// <remarks/>
        Expired,
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        ConcurrentTx,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public partial class SampledValue
    {
        
        private string valueField;
        
        private ReadingContext contextField;
        
        private bool contextFieldSpecified;
        
        private ValueFormat formatField;
        
        private bool formatFieldSpecified;
        
        private Measurand measurandField;
        
        private bool measurandFieldSpecified;
        
        private Phase phaseField;
        
        private bool phaseFieldSpecified;
        
        private Location locationField;
        
        private bool locationFieldSpecified;
        
        private UnitOfMeasure unitField;
        
        private bool unitFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ReadingContext context
        {
            get
            {
                return this.contextField;
            }
            set
            {
                this.contextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool contextSpecified
        {
            get
            {
                return this.contextFieldSpecified;
            }
            set
            {
                this.contextFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ValueFormat format
        {
            get
            {
                return this.formatField;
            }
            set
            {
                this.formatField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool formatSpecified
        {
            get
            {
                return this.formatFieldSpecified;
            }
            set
            {
                this.formatFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public Measurand measurand
        {
            get
            {
                return this.measurandField;
            }
            set
            {
                this.measurandField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool measurandSpecified
        {
            get
            {
                return this.measurandFieldSpecified;
            }
            set
            {
                this.measurandFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Phase phase
        {
            get
            {
                return this.phaseField;
            }
            set
            {
                this.phaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phaseSpecified
        {
            get
            {
                return this.phaseFieldSpecified;
            }
            set
            {
                this.phaseFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public Location location
        {
            get
            {
                return this.locationField;
            }
            set
            {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool locationSpecified
        {
            get
            {
                return this.locationFieldSpecified;
            }
            set
            {
                this.locationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public UnitOfMeasure unit
        {
            get
            {
                return this.unitField;
            }
            set
            {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitSpecified
        {
            get
            {
                return this.unitFieldSpecified;
            }
            set
            {
                this.unitFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum ReadingContext
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Interruption.Begin")]
        InterruptionBegin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Interruption.End")]
        InterruptionEnd,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sample.Clock")]
        SampleClock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sample.Periodic")]
        SamplePeriodic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Transaction.Begin")]
        TransactionBegin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Transaction.End")]
        TransactionEnd,
        
        /// <remarks/>
        Trigger,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum ValueFormat
    {
        
        /// <remarks/>
        Raw,
        
        /// <remarks/>
        SignedData,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum Measurand
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Current.Export")]
        CurrentExport,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Current.Import")]
        CurrentImport,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Current.Offered")]
        CurrentOffered,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Energy.Active.Export.Register")]
        EnergyActiveExportRegister,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Energy.Active.Import.Register")]
        EnergyActiveImportRegister,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Energy.Reactive.Export.Register")]
        EnergyReactiveExportRegister,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Energy.Reactive.Import.Register")]
        EnergyReactiveImportRegister,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Energy.Active.Export.Interval")]
        EnergyActiveExportInterval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Energy.Active.Import.Interval")]
        EnergyActiveImportInterval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Energy.Reactive.Export.Interval")]
        EnergyReactiveExportInterval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Energy.Reactive.Import.Interval")]
        EnergyReactiveImportInterval,
        
        /// <remarks/>
        Frequency,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Power.Active.Export")]
        PowerActiveExport,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Power.Active.Import")]
        PowerActiveImport,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Power.Factor")]
        PowerFactor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Power.Offered")]
        PowerOffered,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Power.Reactive.Export")]
        PowerReactiveExport,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Power.Reactive.Import")]
        PowerReactiveImport,
        
        /// <remarks/>
        RPM,
        
        /// <remarks/>
        SoC,
        
        /// <remarks/>
        Temperature,
        
        /// <remarks/>
        Voltage,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum Phase
    {
        
        /// <remarks/>
        L1,
        
        /// <remarks/>
        L2,
        
        /// <remarks/>
        L3,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L1-N")]
        L1N,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L2-N")]
        L2N,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L3-N")]
        L3N,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L1-L2")]
        L1L2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L2-L3")]
        L2L3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L3-L1")]
        L3L1,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum Location
    {
        
        /// <remarks/>
        Body,
        
        /// <remarks/>
        Cable,
        
        /// <remarks/>
        EV,
        
        /// <remarks/>
        Inlet,
        
        /// <remarks/>
        Outlet,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum UnitOfMeasure
    {
        
        /// <remarks/>
        Celsius,
        
        /// <remarks/>
        Fahrenheit,
        
        /// <remarks/>
        Wh,
        
        /// <remarks/>
        kWh,
        
        /// <remarks/>
        varh,
        
        /// <remarks/>
        kvarh,
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        VA,
        
        /// <remarks/>
        kVA,
        
        /// <remarks/>
        var,
        
        /// <remarks/>
        kvar,
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        V,
        
        /// <remarks/>
        K,
        
        /// <remarks/>
        Percent,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public partial class MeterValue
    {
        
        private System.DateTime timestampField;
        
        private SampledValue[] sampledValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.DateTime timestamp
        {
            get
            {
                return this.timestampField;
            }
            set
            {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("sampledValue", Order=1)]
        public SampledValue[] sampledValue
        {
            get
            {
                return this.sampledValueField;
            }
            set
            {
                this.sampledValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="authorizeRequest", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class AuthorizeRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
        public string chargeBoxIdentity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public string idTag;
        
        public AuthorizeRequest()
        {
        }
        
        public AuthorizeRequest(string chargeBoxIdentity, string idTag)
        {
            this.chargeBoxIdentity = chargeBoxIdentity;
            this.idTag = idTag;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="authorizeResponse", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class AuthorizeResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public ServiceReference1.IdTagInfo idTagInfo;
        
        public AuthorizeResponse()
        {
        }
        
        public AuthorizeResponse(ServiceReference1.IdTagInfo idTagInfo)
        {
            this.idTagInfo = idTagInfo;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum RegistrationStatus
    {
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Rejected,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="bootNotificationRequest", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class BootNotificationRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
        public string chargeBoxIdentity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public string chargePointVendor;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=1)]
        public string chargePointModel;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=2)]
        public string chargePointSerialNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=3)]
        public string chargeBoxSerialNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=4)]
        public string firmwareVersion;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=5)]
        public string iccid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=6)]
        public string imsi;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=7)]
        public string meterType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=8)]
        public string meterSerialNumber;
        
        public BootNotificationRequest()
        {
        }
        
        public BootNotificationRequest(string chargeBoxIdentity, string chargePointVendor, string chargePointModel, string chargePointSerialNumber, string chargeBoxSerialNumber, string firmwareVersion, string iccid, string imsi, string meterType, string meterSerialNumber)
        {
            this.chargeBoxIdentity = chargeBoxIdentity;
            this.chargePointVendor = chargePointVendor;
            this.chargePointModel = chargePointModel;
            this.chargePointSerialNumber = chargePointSerialNumber;
            this.chargeBoxSerialNumber = chargeBoxSerialNumber;
            this.firmwareVersion = firmwareVersion;
            this.iccid = iccid;
            this.imsi = imsi;
            this.meterType = meterType;
            this.meterSerialNumber = meterSerialNumber;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="bootNotificationResponse", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class BootNotificationResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public ServiceReference1.RegistrationStatus status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=1)]
        public System.DateTime currentTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=2)]
        public int interval;
        
        public BootNotificationResponse()
        {
        }
        
        public BootNotificationResponse(ServiceReference1.RegistrationStatus status, System.DateTime currentTime, int interval)
        {
            this.status = status;
            this.currentTime = currentTime;
            this.interval = interval;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum DataTransferStatus
    {
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Rejected,
        
        /// <remarks/>
        UnknownMessageId,
        
        /// <remarks/>
        UnknownVendorId,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="dataTransferRequest", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class DataTransferRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
        public string chargeBoxIdentity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public string vendorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=1)]
        public string messageId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=2)]
        public string data;
        
        public DataTransferRequest()
        {
        }
        
        public DataTransferRequest(string chargeBoxIdentity, string vendorId, string messageId, string data)
        {
            this.chargeBoxIdentity = chargeBoxIdentity;
            this.vendorId = vendorId;
            this.messageId = messageId;
            this.data = data;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="dataTransferResponse", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class DataTransferResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public ServiceReference1.DataTransferStatus status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=1)]
        public string data;
        
        public DataTransferResponse()
        {
        }
        
        public DataTransferResponse(ServiceReference1.DataTransferStatus status, string data)
        {
            this.status = status;
            this.data = data;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum DiagnosticsStatus
    {
        
        /// <remarks/>
        Idle,
        
        /// <remarks/>
        Uploaded,
        
        /// <remarks/>
        UploadFailed,
        
        /// <remarks/>
        Uploading,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="diagnosticsStatusNotificationRequest", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class DiagnosticsStatusNotificationRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
        public string chargeBoxIdentity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public ServiceReference1.DiagnosticsStatus status;
        
        public DiagnosticsStatusNotificationRequest()
        {
        }
        
        public DiagnosticsStatusNotificationRequest(string chargeBoxIdentity, ServiceReference1.DiagnosticsStatus status)
        {
            this.chargeBoxIdentity = chargeBoxIdentity;
            this.status = status;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="diagnosticsStatusNotificationResponse", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class DiagnosticsStatusNotificationResponse
    {
        
        public DiagnosticsStatusNotificationResponse()
        {
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum FirmwareStatus
    {
        
        /// <remarks/>
        Downloaded,
        
        /// <remarks/>
        DownloadFailed,
        
        /// <remarks/>
        Downloading,
        
        /// <remarks/>
        Idle,
        
        /// <remarks/>
        InstallationFailed,
        
        /// <remarks/>
        Installed,
        
        /// <remarks/>
        Installing,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="firmwareStatusNotificationRequest", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class FirmwareStatusNotificationRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
        public string chargeBoxIdentity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public ServiceReference1.FirmwareStatus status;
        
        public FirmwareStatusNotificationRequest()
        {
        }
        
        public FirmwareStatusNotificationRequest(string chargeBoxIdentity, ServiceReference1.FirmwareStatus status)
        {
            this.chargeBoxIdentity = chargeBoxIdentity;
            this.status = status;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="firmwareStatusNotificationResponse", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class FirmwareStatusNotificationResponse
    {
        
        public FirmwareStatusNotificationResponse()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="heartbeatRequest", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class HeartbeatRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
        public string chargeBoxIdentity;
        
        public HeartbeatRequest()
        {
        }
        
        public HeartbeatRequest(string chargeBoxIdentity)
        {
            this.chargeBoxIdentity = chargeBoxIdentity;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="heartbeatResponse", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class HeartbeatResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public System.DateTime currentTime;
        
        public HeartbeatResponse()
        {
        }
        
        public HeartbeatResponse(System.DateTime currentTime)
        {
            this.currentTime = currentTime;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="meterValuesRequest", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class MeterValuesRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
        public string chargeBoxIdentity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public int connectorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=1)]
        public int transactionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute("meterValue")]
        public ServiceReference1.MeterValue[] meterValue;
        
        public MeterValuesRequest()
        {
        }
        
        public MeterValuesRequest(string chargeBoxIdentity, int connectorId, int transactionId, ServiceReference1.MeterValue[] meterValue)
        {
            this.chargeBoxIdentity = chargeBoxIdentity;
            this.connectorId = connectorId;
            this.transactionId = transactionId;
            this.meterValue = meterValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="meterValuesResponse", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class MeterValuesResponse
    {
        
        public MeterValuesResponse()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="startTransactionRequest", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class StartTransactionRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
        public string chargeBoxIdentity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public int connectorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=1)]
        public string idTag;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=2)]
        public System.DateTime timestamp;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=3)]
        public int meterStart;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=4)]
        public int reservationId;
        
        public StartTransactionRequest()
        {
        }
        
        public StartTransactionRequest(string chargeBoxIdentity, int connectorId, string idTag, System.DateTime timestamp, int meterStart, int reservationId)
        {
            this.chargeBoxIdentity = chargeBoxIdentity;
            this.connectorId = connectorId;
            this.idTag = idTag;
            this.timestamp = timestamp;
            this.meterStart = meterStart;
            this.reservationId = reservationId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="startTransactionResponse", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class StartTransactionResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public int transactionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=1)]
        public ServiceReference1.IdTagInfo idTagInfo;
        
        public StartTransactionResponse()
        {
        }
        
        public StartTransactionResponse(int transactionId, ServiceReference1.IdTagInfo idTagInfo)
        {
            this.transactionId = transactionId;
            this.idTagInfo = idTagInfo;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum ChargePointStatus
    {
        
        /// <remarks/>
        Available,
        
        /// <remarks/>
        Preparing,
        
        /// <remarks/>
        Charging,
        
        /// <remarks/>
        SuspendedEV,
        
        /// <remarks/>
        SuspendedEVSE,
        
        /// <remarks/>
        Finishing,
        
        /// <remarks/>
        Reserved,
        
        /// <remarks/>
        Faulted,
        
        /// <remarks/>
        Unavailable,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum ChargePointErrorCode
    {
        
        /// <remarks/>
        ConnectorLockFailure,
        
        /// <remarks/>
        EVCommunicationError,
        
        /// <remarks/>
        GroundFailure,
        
        /// <remarks/>
        HighTemperature,
        
        /// <remarks/>
        InternalError,
        
        /// <remarks/>
        LocalListConflict,
        
        /// <remarks/>
        NoError,
        
        /// <remarks/>
        OtherError,
        
        /// <remarks/>
        OverCurrentFailure,
        
        /// <remarks/>
        OverVoltage,
        
        /// <remarks/>
        PowerMeterFailure,
        
        /// <remarks/>
        PowerSwitchFailure,
        
        /// <remarks/>
        ReaderFailure,
        
        /// <remarks/>
        ResetFailure,
        
        /// <remarks/>
        UnderVoltage,
        
        /// <remarks/>
        WeakSignal,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="statusNotificationRequest", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class StatusNotificationRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
        public string chargeBoxIdentity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public int connectorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=1)]
        public ServiceReference1.ChargePointStatus status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=2)]
        public ServiceReference1.ChargePointErrorCode errorCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=3)]
        public string info;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=4)]
        public System.DateTime timestamp;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=5)]
        public string vendorId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=6)]
        public string vendorErrorCode;
        
        public StatusNotificationRequest()
        {
        }
        
        public StatusNotificationRequest(string chargeBoxIdentity, int connectorId, ServiceReference1.ChargePointStatus status, ServiceReference1.ChargePointErrorCode errorCode, string info, System.DateTime timestamp, string vendorId, string vendorErrorCode)
        {
            this.chargeBoxIdentity = chargeBoxIdentity;
            this.connectorId = connectorId;
            this.status = status;
            this.errorCode = errorCode;
            this.info = info;
            this.timestamp = timestamp;
            this.vendorId = vendorId;
            this.vendorErrorCode = vendorErrorCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="statusNotificationResponse", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class StatusNotificationResponse
    {
        
        public StatusNotificationResponse()
        {
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
    public enum Reason
    {
        
        /// <remarks/>
        EmergencyStop,
        
        /// <remarks/>
        EVDisconnected,
        
        /// <remarks/>
        HardReset,
        
        /// <remarks/>
        Local,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        PowerLoss,
        
        /// <remarks/>
        Reboot,
        
        /// <remarks/>
        Remote,
        
        /// <remarks/>
        SoftReset,
        
        /// <remarks/>
        UnlockCommand,
        
        /// <remarks/>
        DeAuthorized,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="stopTransactionRequest", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class StopTransactionRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="urn://Ocpp/Cs/2015/10/")]
        public string chargeBoxIdentity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public int transactionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=1)]
        public string idTag;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=2)]
        public System.DateTime timestamp;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=3)]
        public int meterStop;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=4)]
        public ServiceReference1.Reason reason;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute("transactionData")]
        public ServiceReference1.MeterValue[] transactionData;
        
        public StopTransactionRequest()
        {
        }
        
        public StopTransactionRequest(string chargeBoxIdentity, int transactionId, string idTag, System.DateTime timestamp, int meterStop, ServiceReference1.Reason reason, ServiceReference1.MeterValue[] transactionData)
        {
            this.chargeBoxIdentity = chargeBoxIdentity;
            this.transactionId = transactionId;
            this.idTag = idTag;
            this.timestamp = timestamp;
            this.meterStop = meterStop;
            this.reason = reason;
            this.transactionData = transactionData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="stopTransactionResponse", WrapperNamespace="urn://Ocpp/Cs/2015/10/", IsWrapped=true)]
    public partial class StopTransactionResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://Ocpp/Cs/2015/10/", Order=0)]
        public ServiceReference1.IdTagInfo idTagInfo;
        
        public StopTransactionResponse()
        {
        }
        
        public StopTransactionResponse(ServiceReference1.IdTagInfo idTagInfo)
        {
            this.idTagInfo = idTagInfo;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface CentralSystemServiceChannel : ServiceReference1.CentralSystemService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class CentralSystemServiceClient : System.ServiceModel.ClientBase<ServiceReference1.CentralSystemService>, ServiceReference1.CentralSystemService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CentralSystemServiceClient() : 
                base(CentralSystemServiceClient.GetDefaultBinding(), CentralSystemServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.CentralSystemServiceSoap12.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CentralSystemServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CentralSystemServiceClient.GetBindingForEndpoint(endpointConfiguration), CentralSystemServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CentralSystemServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CentralSystemServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CentralSystemServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CentralSystemServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CentralSystemServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceReference1.AuthorizeResponse ServiceReference1.CentralSystemService.Authorize(ServiceReference1.AuthorizeRequest request)
        {
            return base.Channel.Authorize(request);
        }
        
        public ServiceReference1.IdTagInfo Authorize(string chargeBoxIdentity, string idTag)
        {
            ServiceReference1.AuthorizeRequest inValue = new ServiceReference1.AuthorizeRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.idTag = idTag;
            ServiceReference1.AuthorizeResponse retVal = ((ServiceReference1.CentralSystemService)(this)).Authorize(inValue);
            return retVal.idTagInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.AuthorizeResponse> ServiceReference1.CentralSystemService.AuthorizeAsync(ServiceReference1.AuthorizeRequest request)
        {
            return base.Channel.AuthorizeAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.AuthorizeResponse> AuthorizeAsync(string chargeBoxIdentity, string idTag)
        {
            ServiceReference1.AuthorizeRequest inValue = new ServiceReference1.AuthorizeRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.idTag = idTag;
            return ((ServiceReference1.CentralSystemService)(this)).AuthorizeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceReference1.BootNotificationResponse ServiceReference1.CentralSystemService.BootNotification(ServiceReference1.BootNotificationRequest request)
        {
            return base.Channel.BootNotification(request);
        }
        
        public ServiceReference1.RegistrationStatus BootNotification(string chargeBoxIdentity, string chargePointVendor, string chargePointModel, string chargePointSerialNumber, string chargeBoxSerialNumber, string firmwareVersion, string iccid, string imsi, string meterType, string meterSerialNumber, out System.DateTime currentTime, out int interval)
        {
            ServiceReference1.BootNotificationRequest inValue = new ServiceReference1.BootNotificationRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.chargePointVendor = chargePointVendor;
            inValue.chargePointModel = chargePointModel;
            inValue.chargePointSerialNumber = chargePointSerialNumber;
            inValue.chargeBoxSerialNumber = chargeBoxSerialNumber;
            inValue.firmwareVersion = firmwareVersion;
            inValue.iccid = iccid;
            inValue.imsi = imsi;
            inValue.meterType = meterType;
            inValue.meterSerialNumber = meterSerialNumber;
            ServiceReference1.BootNotificationResponse retVal = ((ServiceReference1.CentralSystemService)(this)).BootNotification(inValue);
            currentTime = retVal.currentTime;
            interval = retVal.interval;
            return retVal.status;
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.BootNotificationResponse> BootNotificationAsync(ServiceReference1.BootNotificationRequest request)
        {
            return base.Channel.BootNotificationAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceReference1.DataTransferResponse ServiceReference1.CentralSystemService.DataTransfer(ServiceReference1.DataTransferRequest request)
        {
            return base.Channel.DataTransfer(request);
        }
        
        public ServiceReference1.DataTransferStatus DataTransfer(string chargeBoxIdentity, string vendorId, string messageId, ref string data)
        {
            ServiceReference1.DataTransferRequest inValue = new ServiceReference1.DataTransferRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.vendorId = vendorId;
            inValue.messageId = messageId;
            inValue.data = data;
            ServiceReference1.DataTransferResponse retVal = ((ServiceReference1.CentralSystemService)(this)).DataTransfer(inValue);
            data = retVal.data;
            return retVal.status;
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.DataTransferResponse> DataTransferAsync(ServiceReference1.DataTransferRequest request)
        {
            return base.Channel.DataTransferAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceReference1.DiagnosticsStatusNotificationResponse ServiceReference1.CentralSystemService.DiagnosticsStatusNotification(ServiceReference1.DiagnosticsStatusNotificationRequest request)
        {
            return base.Channel.DiagnosticsStatusNotification(request);
        }
        
        public void DiagnosticsStatusNotification(string chargeBoxIdentity, ServiceReference1.DiagnosticsStatus status)
        {
            ServiceReference1.DiagnosticsStatusNotificationRequest inValue = new ServiceReference1.DiagnosticsStatusNotificationRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.status = status;
            ServiceReference1.DiagnosticsStatusNotificationResponse retVal = ((ServiceReference1.CentralSystemService)(this)).DiagnosticsStatusNotification(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.DiagnosticsStatusNotificationResponse> ServiceReference1.CentralSystemService.DiagnosticsStatusNotificationAsync(ServiceReference1.DiagnosticsStatusNotificationRequest request)
        {
            return base.Channel.DiagnosticsStatusNotificationAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.DiagnosticsStatusNotificationResponse> DiagnosticsStatusNotificationAsync(string chargeBoxIdentity, ServiceReference1.DiagnosticsStatus status)
        {
            ServiceReference1.DiagnosticsStatusNotificationRequest inValue = new ServiceReference1.DiagnosticsStatusNotificationRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.status = status;
            return ((ServiceReference1.CentralSystemService)(this)).DiagnosticsStatusNotificationAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceReference1.FirmwareStatusNotificationResponse ServiceReference1.CentralSystemService.FirmwareStatusNotification(ServiceReference1.FirmwareStatusNotificationRequest request)
        {
            return base.Channel.FirmwareStatusNotification(request);
        }
        
        public void FirmwareStatusNotification(string chargeBoxIdentity, ServiceReference1.FirmwareStatus status)
        {
            ServiceReference1.FirmwareStatusNotificationRequest inValue = new ServiceReference1.FirmwareStatusNotificationRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.status = status;
            ServiceReference1.FirmwareStatusNotificationResponse retVal = ((ServiceReference1.CentralSystemService)(this)).FirmwareStatusNotification(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.FirmwareStatusNotificationResponse> ServiceReference1.CentralSystemService.FirmwareStatusNotificationAsync(ServiceReference1.FirmwareStatusNotificationRequest request)
        {
            return base.Channel.FirmwareStatusNotificationAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.FirmwareStatusNotificationResponse> FirmwareStatusNotificationAsync(string chargeBoxIdentity, ServiceReference1.FirmwareStatus status)
        {
            ServiceReference1.FirmwareStatusNotificationRequest inValue = new ServiceReference1.FirmwareStatusNotificationRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.status = status;
            return ((ServiceReference1.CentralSystemService)(this)).FirmwareStatusNotificationAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceReference1.HeartbeatResponse ServiceReference1.CentralSystemService.Heartbeat(ServiceReference1.HeartbeatRequest request)
        {
            return base.Channel.Heartbeat(request);
        }
        
        public System.DateTime Heartbeat(string chargeBoxIdentity)
        {
            ServiceReference1.HeartbeatRequest inValue = new ServiceReference1.HeartbeatRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            ServiceReference1.HeartbeatResponse retVal = ((ServiceReference1.CentralSystemService)(this)).Heartbeat(inValue);
            return retVal.currentTime;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.HeartbeatResponse> ServiceReference1.CentralSystemService.HeartbeatAsync(ServiceReference1.HeartbeatRequest request)
        {
            return base.Channel.HeartbeatAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.HeartbeatResponse> HeartbeatAsync(string chargeBoxIdentity)
        {
            ServiceReference1.HeartbeatRequest inValue = new ServiceReference1.HeartbeatRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            return ((ServiceReference1.CentralSystemService)(this)).HeartbeatAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceReference1.MeterValuesResponse ServiceReference1.CentralSystemService.MeterValues(ServiceReference1.MeterValuesRequest request)
        {
            return base.Channel.MeterValues(request);
        }
        
        public void MeterValues(string chargeBoxIdentity, int connectorId, int transactionId, ServiceReference1.MeterValue[] meterValue)
        {
            ServiceReference1.MeterValuesRequest inValue = new ServiceReference1.MeterValuesRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.connectorId = connectorId;
            inValue.transactionId = transactionId;
            inValue.meterValue = meterValue;
            ServiceReference1.MeterValuesResponse retVal = ((ServiceReference1.CentralSystemService)(this)).MeterValues(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.MeterValuesResponse> ServiceReference1.CentralSystemService.MeterValuesAsync(ServiceReference1.MeterValuesRequest request)
        {
            return base.Channel.MeterValuesAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.MeterValuesResponse> MeterValuesAsync(string chargeBoxIdentity, int connectorId, int transactionId, ServiceReference1.MeterValue[] meterValue)
        {
            ServiceReference1.MeterValuesRequest inValue = new ServiceReference1.MeterValuesRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.connectorId = connectorId;
            inValue.transactionId = transactionId;
            inValue.meterValue = meterValue;
            return ((ServiceReference1.CentralSystemService)(this)).MeterValuesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceReference1.StartTransactionResponse ServiceReference1.CentralSystemService.StartTransaction(ServiceReference1.StartTransactionRequest request)
        {
            return base.Channel.StartTransaction(request);
        }
        
        public int StartTransaction(string chargeBoxIdentity, int connectorId, string idTag, System.DateTime timestamp, int meterStart, int reservationId, out ServiceReference1.IdTagInfo idTagInfo)
        {
            ServiceReference1.StartTransactionRequest inValue = new ServiceReference1.StartTransactionRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.connectorId = connectorId;
            inValue.idTag = idTag;
            inValue.timestamp = timestamp;
            inValue.meterStart = meterStart;
            inValue.reservationId = reservationId;
            ServiceReference1.StartTransactionResponse retVal = ((ServiceReference1.CentralSystemService)(this)).StartTransaction(inValue);
            idTagInfo = retVal.idTagInfo;
            return retVal.transactionId;
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.StartTransactionResponse> StartTransactionAsync(ServiceReference1.StartTransactionRequest request)
        {
            return base.Channel.StartTransactionAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceReference1.StatusNotificationResponse ServiceReference1.CentralSystemService.StatusNotification(ServiceReference1.StatusNotificationRequest request)
        {
            return base.Channel.StatusNotification(request);
        }
        
        public void StatusNotification(string chargeBoxIdentity, int connectorId, ServiceReference1.ChargePointStatus status, ServiceReference1.ChargePointErrorCode errorCode, string info, System.DateTime timestamp, string vendorId, string vendorErrorCode)
        {
            ServiceReference1.StatusNotificationRequest inValue = new ServiceReference1.StatusNotificationRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.connectorId = connectorId;
            inValue.status = status;
            inValue.errorCode = errorCode;
            inValue.info = info;
            inValue.timestamp = timestamp;
            inValue.vendorId = vendorId;
            inValue.vendorErrorCode = vendorErrorCode;
            ServiceReference1.StatusNotificationResponse retVal = ((ServiceReference1.CentralSystemService)(this)).StatusNotification(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.StatusNotificationResponse> ServiceReference1.CentralSystemService.StatusNotificationAsync(ServiceReference1.StatusNotificationRequest request)
        {
            return base.Channel.StatusNotificationAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.StatusNotificationResponse> StatusNotificationAsync(string chargeBoxIdentity, int connectorId, ServiceReference1.ChargePointStatus status, ServiceReference1.ChargePointErrorCode errorCode, string info, System.DateTime timestamp, string vendorId, string vendorErrorCode)
        {
            ServiceReference1.StatusNotificationRequest inValue = new ServiceReference1.StatusNotificationRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.connectorId = connectorId;
            inValue.status = status;
            inValue.errorCode = errorCode;
            inValue.info = info;
            inValue.timestamp = timestamp;
            inValue.vendorId = vendorId;
            inValue.vendorErrorCode = vendorErrorCode;
            return ((ServiceReference1.CentralSystemService)(this)).StatusNotificationAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceReference1.StopTransactionResponse ServiceReference1.CentralSystemService.StopTransaction(ServiceReference1.StopTransactionRequest request)
        {
            return base.Channel.StopTransaction(request);
        }
        
        public ServiceReference1.IdTagInfo StopTransaction(string chargeBoxIdentity, int transactionId, string idTag, System.DateTime timestamp, int meterStop, ServiceReference1.Reason reason, ServiceReference1.MeterValue[] transactionData)
        {
            ServiceReference1.StopTransactionRequest inValue = new ServiceReference1.StopTransactionRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.transactionId = transactionId;
            inValue.idTag = idTag;
            inValue.timestamp = timestamp;
            inValue.meterStop = meterStop;
            inValue.reason = reason;
            inValue.transactionData = transactionData;
            ServiceReference1.StopTransactionResponse retVal = ((ServiceReference1.CentralSystemService)(this)).StopTransaction(inValue);
            return retVal.idTagInfo;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.StopTransactionResponse> ServiceReference1.CentralSystemService.StopTransactionAsync(ServiceReference1.StopTransactionRequest request)
        {
            return base.Channel.StopTransactionAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.StopTransactionResponse> StopTransactionAsync(string chargeBoxIdentity, int transactionId, string idTag, System.DateTime timestamp, int meterStop, ServiceReference1.Reason reason, ServiceReference1.MeterValue[] transactionData)
        {
            ServiceReference1.StopTransactionRequest inValue = new ServiceReference1.StopTransactionRequest();
            inValue.chargeBoxIdentity = chargeBoxIdentity;
            inValue.transactionId = transactionId;
            inValue.idTag = idTag;
            inValue.timestamp = timestamp;
            inValue.meterStop = meterStop;
            inValue.reason = reason;
            inValue.transactionData = transactionData;
            return ((ServiceReference1.CentralSystemService)(this)).StopTransactionAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CentralSystemServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CentralSystemServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost/Ocpp/CentralSystemService/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CentralSystemServiceClient.GetBindingForEndpoint(EndpointConfiguration.CentralSystemServiceSoap12);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CentralSystemServiceClient.GetEndpointAddress(EndpointConfiguration.CentralSystemServiceSoap12);
        }
        
        public enum EndpointConfiguration
        {
            
            CentralSystemServiceSoap12,
        }
    }
}
